import numpy as np

def normalize_to_minus_one_to_plus_one(data):
    min_val = np.min(data)
    max_val = np.max(data)
    
    normalized_data = (data - min_val) / (max_val - min_val)
    normalized_data = normalized_data * 2 - 1
    
    return normalized_data

Mobility_normalized_data = normalize_to_minus_one_to_plus_one(Mobility_original)

test_list = []
Norm_0 = V_th_normalized_data_with_0[-1] 

for i in range(len(V_th_normalized_data_with_0)-1):
    num = -np.abs(V_th_normalized_data_with_0[i]-Norm_0)
    test_list.append(num)

outputs = np.column_stack((test_list, Mobility_normalized_data))
    
# Pareto front 
def is_pareto_efficient_max(costs):
    is_efficient = np.ones(costs.shape[0], dtype=bool)
    for i, c in enumerate(costs):
        if is_efficient[i]:
            is_efficient[is_efficient] = np.any(costs[is_efficient] >= c, axis=1)
            is_efficient[i] = True  
    return is_efficient

#Calculate Pareto Front
pareto_mask = is_pareto_efficient_max(outputs)
pareto_front = outputs[pareto_mask]
pareto_front = pareto_front[np.argsort(pareto_front[:, 0])]
nadir_point = np.min(pareto_front, axis=0)

# reference point
reference_point = nadir_point - 0.1 * np.abs(nadir_point)
